// Openshift project
openshiftProject = "continuous-infra"
DOCKER_REPO_URL = '172.30.254.79:5000'
STABLE_LABEL = "stable"


library identifier: "ci-pipeline@master",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/CentOS-PaaS-SIG/ci-pipeline",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                    [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'merge-trigger-' + env.ghprbActualCommit
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image DOCKER_REPO_URL + '/' + openshiftProject + '/jenkins-continuous-infra-slave:' + STABLE_LABEL
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Merge PR and Rebuild Images") {
            steps {
                // lock to make sure only one is allowed at anytime
                lock('merge-and-image-rebuild-lock') {
                    script {
                        // need this for ghprb plugin since it is really
                        // a post build step and it assumes the build is complete.
                        currentBuild.result = 'SUCCESS'
                    }

                    step([$class: 'GhprbPullRequestMerge', allowMergeWithoutTriggerPhrase: false, deleteOnMerge: false, disallowOwnCode: false, failOnNonMerge: false, mergeComment: ' ', onlyAdminsMerge: false])

                    script {
                        openshift.withCluster() {
                            openshift.withProject(openshiftProject) {
                                imageOperations.each {
                                    pipelineUtils.buildStableImage(openshiftProject, it)
                                }
                            }
                        }
                        pipelineUtils.sendPRCommentforTags(imageOperations)
                    }
                }
            }
        }
    }
}

