/**
 * CI Stage Pipeline Trigger
 *
 * This is a declarative pipeline for the CI stage pipeline
 * that includes the building of images based on PRs
 *
 */

// Openshift project
openshiftProject = "continuous-infra"
DOCKER_REPO_URL = '172.30.254.79:5000'

// Defaults for SCM operations
env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/upstream-fedora-pipeline'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'

// If this PR does not include an image change, then use this tag
STABLE_LABEL = "stable"
tagMap = [:]

// Initialize
tagMap['jenkins-continuous-infra-slave'] = STABLE_LABEL
tagMap['rpmbuild'] = STABLE_LABEL
tagMap['rsync'] = STABLE_LABEL
tagMap['ostree-compose'] = STABLE_LABEL
tagMap['ostree-image-compose'] = STABLE_LABEL
tagMap['singlehost-test'] = STABLE_LABEL
tagMap['ostree-boot-image'] = STABLE_LABEL
tagMap['linchpin-libvirt'] = STABLE_LABEL

// Fedora Fedmsg Message Provider for stage
MSG_PROVIDER = "fedora-fedmsg-stage"

// IRC properties
IRC_NICK = "contra-bot"
IRC_CHANNEL = "#contra-ci-cd"

// CI_MESSAGES known to build successfully
CANNED_CI_MESSAGE = '{"commit":{"username":"fgiudici","stats":{"files":{"tests/tests.yml":{"deletions":0,"additions":487,"lines":487}},"total":{"deletions":0,"files":1,"additions":487,"lines":487}},"name":"Vladimir Benes","rev":"c83e23686352561a08a37c7989881957361986ca","namespace":"rpms","agent":"fgiudici","summary":"Add CI tests using the Standard Test Interface","repo":"NetworkManager","branch":"f27","seen":false,"path":"/srv/git/repositories/rpms/NetworkManager.git","message":"Add CI tests using the Standard Test Interface\\n\\nAdding initial set of basic functionality tests for NetworkManager\\naccording to the Standard Test Interface [1]. See Quick Start Guide\\nfor brief introduction about how to run these tests [2].\\n\\n[1] https://fedoraproject.org/wiki/CI/Standard_Test_Interface\\n[2] https://fedoraproject.org/wiki/CI/Quick_Start_Guide\\n","email":"vbenes@redhat.com"},"topic":"org.fedoraproject.prod.git.receive"}'

def libraries = ['cico-pipeline'           : ['master', 'https://github.com/CentOS/cico-pipeline-library.git'],
                 'ci-pipeline'             : ['master', 'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git']]

libraries.each { name, repo ->
    library identifier: "${name}@${repo[0]}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: repo[1]])
}

library identifier: "ci-pipeline@${env.ghprbActualCommit}",
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: "https://github.com/${env.ghprbGhRepository}",
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                       [$class: 'RefSpecsSCMSourceTrait',
                                        templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                    [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])

pipeline {
    agent {
        kubernetes {
            cloud 'openshift'
            label 'stage-trigger-' + env.ghprbActualCommit
            containerTemplate {
                name 'jnlp'
                args '${computer.jnlpmac} ${computer.name}'
                image DOCKER_REPO_URL + '/' + openshiftProject + '/jenkins-continuous-infra-slave:' + STABLE_LABEL
                ttyEnabled false
                command ''
            }
        }
    }
    stages {
        stage("Get Changelog") {
            steps {
                node('master') {
                    script {
                        echo "PR number is: ${env.ghprbPullId}"
                        env.changeLogStr = pipelineUtils.getChangeLogFromCurrentBuild()
                        echo env.changeLogStr
                    }
                    writeFile file: 'changelog.txt', text: env.changeLogStr
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'changelog.txt'
                }
            }
        }
        stage("Setup Container Templates") {
            steps {
                script {
                    pipelineUtils.setupContainerTemplates(openshiftProject)
                }
            }
        }
        stage("jenkins-continuous-infra-slave image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/s2i/jenkins/slave/**"
            }
            steps {
                script {
                    tagMap['jenkins-continuous-infra-slave'] = pipelineUtils.buildImage(openshiftProject, "jenkins-continuous-infra-slave")
                }
            }
        }
        stage("rpmbuild image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/rpmbuild/**"
            }
            steps {
                script {
                    tagMap['rpmbuild'] = pipelineUtils.buildImage(openshiftProject, "rpmbuild")
                }
            }
        }
        stage("rsync image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/rsync/**"
            }
            steps {
                script {
                    tagMap['rsync'] = pipelineUtils.buildImage(openshiftProject, "rsync")
                }
            }
        }
        stage("ostree-compose image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/ostree_compose/**"
            }
            steps {
                script {
                    tagMap['ostree-compose'] = pipelineUtils.buildImage(openshiftProject, "ostree-compose")
                }
            }
        }
        stage("ostree-image-compose image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/ostree-image-compose/**"
            }
            steps {
                script {
                    tagMap['ostree-image-compose'] = pipelineUtils.buildImage(openshiftProject, "ostree-image-compose")
                }
            }
        }
        stage("singlehost-test image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/singlehost-test/**"
            }
            steps {
                script {
                    tagMap['singlehost-test'] = pipelineUtils.buildImage(openshiftProject, "singlehost-test")
                }
            }
        }
        stage("ostree-boot-image image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/ostree-boot-image/**"
            }
            steps {
                script {
                    tagMap['ostree-boot-image'] = pipelineUtils.buildImage(openshiftProject, "ostree-boot-image")
                }
            }
        }
        stage("linchpin-libvirt image build") {
            when {
                // Only build if we have related files in changeset
                changeset "config/Dockerfiles/linchpin-libvirt/**"
            }
            steps {
                script {
                    tagMap['linchpin-libvirt'] = pipelineUtils.buildImage(openshiftProject, "linchpin-libvirt")
                }
            }
        }
        stage("Image Tag Report") {
            steps {
                script {
                    // Use tags derived from above image builds
                    //
                    pipelineUtils.printLabelMap(tagMap)
                }
            }
        }
        stage("run stage job") {
            steps {
                sleep 30
                build job: 'upstream-fedora-stage-pipeline',
                        parameters: [
                                string(name: 'CI_MESSAGE', value: CANNED_CI_MESSAGE),
                                string(name: 'ghprbActualCommit', value: "${env.ghprbActualCommit}"),
                                string(name: 'ghprbGhRepository', value: "${env.ghprbGhRepository}"),
                                string(name: 'ghprbPullAuthorLogin', value: "${env.ghprbPullAuthorLogin}"),
                                string(name: 'TARGET_BRANCH', value: "f27"),
                                string(name: 'sha1', value: "${env.sha1}"),
                                string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                                string(name: 'GENERATE_IMAGE', value: "true"),
                                string(name: 'SLAVE_TAG', value: tagMap['jenkins-continuous-infra-slave']),
                                string(name: 'RPMBUILD_TAG', value: tagMap['rpmbuild']),
                                string(name: 'RSYNC_TAG', value: tagMap['rsync']),
                                string(name: 'OSTREE_COMPOSE_TAG', value: tagMap['ostree-compose']),
                                string(name: 'OSTREE_IMAGE_COMPOSE_TAG', value: tagMap['ostree-image-compose']),
                                string(name: 'SINGLEHOST_TEST_TAG', value: tagMap['singlehost-test']),
                                string(name: 'OSTREE_BOOT_IMAGE_TAG', value: tagMap['ostree-boot-image']),
                                string(name: 'LINCHPIN_LIBVIRT_TAG', value: tagMap['linchpin-libvirt'])
                        ],
                        wait: true
            }
        }
    }
    post {
        always {
            script {
                String prMsg = ""
                if (env.ghprbActualCommit != null && env.ghprbActualCommit != "master") {
                    prMsg = "(PR #${env.ghprbPullId} ${env.ghprbPullAuthorLogin})"
                }
                def message = "${JOB_NAME} ${prMsg} build #${BUILD_NUMBER}: ${currentBuild.currentResult}: ${BUILD_URL}"
                pipelineUtils.sendIRCNotification("${IRC_NICK}-${UUID.randomUUID()}", IRC_CHANNEL, message)
            }
        }
        success {
            echo "yay!"
        }
        failure {
            error "build failed!"
        }
    }
}
